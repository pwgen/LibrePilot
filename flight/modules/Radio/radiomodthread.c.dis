#include <pios.h>
#include <uavobjectmanager.h>
#include <openpilot.h>
#include <radio.h>
#include <radiosettings.h> // object holding module settings (input)
#include <radiostatus.h>
#include <pios_board.h>
#include <taskinfo.h>
#include <pios_rfm22b.h>
#include <pios_board_info.h>
#include "radiomodthread.h"


// Private constants
#define MAX_QUEUE_SIZE 20
#define STACK_SIZE     configMINIMAL_STACK_SIZE
#define TASK_PRIORITY  (tskIDLE_PRIORITY + 1)

// Private types
static uint8_t previousStatus;

// Private variables
static xQueueHandle queue;
static xTaskHandle taskHandle;

// Private functions
static void radioTask(void *parameters);

/**
 * Initialise the module, called on startup
 * \returns 0 on success or -1 if initialisation failed
 */
int32_t RadioModThreadInitialize()
{
    // Create object queue
    queue = xQueueCreate(MAX_QUEUE_SIZE, sizeof(UAVObjEvent));

    // Listen for ExampleObject1 updates
//    ExampleObject1ConnectQueue(queue);

    // Start main task
    xTaskCreate(radioTask, "RadioThread", STACK_SIZE, NULL, TASK_PRIORITY, &taskHandle);

    return 0;
}

/**
 * Module thread, should not return.
 */
static void radioTask(__attribute__((unused)) void *parameters)
{
      UAVObjEvent ev;
    //    RadioSettingsData settings;
//    ExampleObject1Data data1;
//    ExampleObject1Data data2;
    //int32_t step;

    // Main task loop
    while (1) {
      //      LINK_LED_TOGGLE;
      PIOS_LED_Toggle(1);
      vTaskDelay(200);
        // Check the event queue for any object updates. In this case
        // we are only listening for the ExampleSettings object. However
        // the module could listen to multiple objects.
        // Since this object only executes on object updates, the task
        // will block until an object event is pushed in the queue.
              while (xQueueReceive(queue, &ev, portMAX_DELAY) != pdTRUE) {
            ;
       }

        // Make sure that the object update is for ExampleObject1
        // This is redundant in this example since we have only
        // registered a single object in the queue, however
        // in most practical cases there will be more than one
        // object connected in the queue.
  /*      if (ev.obj == ExampleObject1Handle()) {
            // Update settings with latest value
            ExampleSettingsGet(&settings);

            // Get the input object
            ExampleObject1Get(&data1);

            // Determine how to update the output object
            if (settings.StepDirection == EXAMPLESETTINGS_STEPDIRECTION_UP) {
                step = settings.StepSize;
            } else {
                step = -settings.StepSize;
            }

            // Update data
            data2.Field1    = data1.Field1 + step;
            data2.Field2    = data1.Field2 + step;
            data2.Field3    = data1.Field3 + step;
            data2.Field4[0] = data1.Field4[0] + step;
            data2.Field4[1] = data1.Field4[1] + step;

            // Update the ExampleObject2, after this function is called
            // notifications to any other modules listening to that object
            // will be sent and the GCS object will be updated through the
            // telemetry link. All operations will take place asynchronously
            // and the following call will return immediately.
            ExampleObject2Set(&data2);
        }
        */
    }
}
static void RadioSettingsUpdatedCb(__attribute__((unused)) UAVObjEvent *ev)
{
    uint8_t currentStatus;

    RadioSettingsStatus(&currentStatus);

    // Check if RFXtalCap value changed
    if (currentStatus != previousStatus) {
      //        PIOS_RFM22B_SetXtalCap(pios_rfm22b_id, currentRFXtalCap);
      // PIOS_RFM22B_Reinit(pios_rfm22b_id);
        previousStatus = currentStatus+1;
    }
}
